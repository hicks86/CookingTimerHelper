@page "/editmenu"
@page "/editmenu/{id}"
@rendermode InteractiveServer

@inject Csla.Blazor.State.StateManager StateManager
@inject Csla.IDataPortal<MenuEdit> menuEditPortal
@inject Csla.Blazor.ViewModel<MenuEdit> vm
@inject NavigationManager NavigationManager

<h1>Edit Menu</h1>

<p>This component demonstrates editing a BusinessBase-derived object.</p>

<p style="background-color:red;color:white">@vm.ViewModelErrorText</p>



@if (vm.Model == null)
{
  <AuthorizeView>
    <Authorized>
      <p>Loading Menu...</p>
    </Authorized>
    <NotAuthorized>
      <p>Not authorized</p>
    </NotAuthorized>
  </AuthorizeView>
}
else
{
    <p>
    <a href="listmenus">List of menu</a>
  </p>
  <table class="table">
    <thead>
      <tr>
        <th></th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Id</td>
        <td>@vm.Model.Id</td>
      </tr>
      @if (vm.GetPropertyInfo(() => vm.Model.Name).CanRead)
      {
        <tr>
          <td>@(vm.GetPropertyInfo(() => vm.Model.Name).FriendlyName)</td>
          <td>
            <TextInput Property="@(vm.GetPropertyInfo(() => vm.Model.Name))" />
          </td>
        </tr>
      }
      <tr>
        <td>Name length</td>
        <td>@vm.Model.Name.Length</td>
      </tr>
      <tr>
        <td>IsNew</td>
        <td>@vm.Model.IsNew</td>
      </tr>
      <tr>
        <td>IsSavable</td>
        <td>@vm.Model.IsSavable</td>
      </tr>
    </tbody>
  </table>
  
  <button @onclick="SaveMenu" disabled="@(!vm.Model.IsSavable)">Save menu</button>
}

@code {
    [Parameter]
    public string? id { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Every page _must_ initialize the state manager
        await StateManager.InitializeAsync();

        //vm.Saved += () => NavigationManager.NavigateTo("listmenus");
        vm.ModelPropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());

        if (string.IsNullOrWhiteSpace(id))
            await vm.RefreshAsync(() => menuEditPortal.CreateAsync());
        else
            await vm.RefreshAsync(() => menuEditPortal.FetchAsync(int.Parse(id)));

    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        // Force Blazor to re-render after input changes

        StateHasChanged();
    }
    private void SaveMenu(MouseEventArgs e)
    {
        vm.Saved += () => NavigationManager.NavigateTo($"editfooditems/{vm.Model.Id}");

        vm.SaveAsync();
    }
}